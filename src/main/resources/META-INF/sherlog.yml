# The preferences section tunes the global preferences for Sherlog Holmes
#
# Preferences can also be adjusted from the command line using the "preferences" command.
preferences:
  # Defines how the content that wasn't parsed will be handled
  # append: appends the content to the last parsed content (useful for logging stacktrace)
  # ignore: ignores the content
  #
  # This preference is used when the fallback mode is not explicitly set
  default-fallback-mode: append
  # Displays all entries that are parsed and added to the registry
  show-added-entries:    false
  # Removes the ANSI colors from the content before parsing it
  remove-ansi-colors:    true
  # The charset to use for reading the inputs
  input-charset:         UTF-8
  # Enables data paging for commands that displays data
  result-paging:         true
  # Sets the number of entries shown on each page
  results-per-page:      15
  # Clears the console before changing pages
  clear-on-paging:       true

# Data models are the structure Sherlog Holmes uses to work
models:
  # all data models should have an id for reference
  java:
    # Defines how this data model will be rendered in the command line
    # Attributes should be enclosed with "{ }", with the optional features as follows:
    #
    # - '#' uses the attribute's value and its correspondent icon
    # - '@' uses just the attribute's icon (if the attribute holds a value)
    # - '|' passes the attribute's value through a String.format() call using the given arguments in the right
    format: '{@exception}{#$source}:{$line} {#timestamp} {#level|%-5s} {#category} {#thread} {#message}'
    # The list of attributes for this data model
    #
    # Attributes can be of the following types:
    # - time:            a java LocalTime (requires format configuration)
    # - datetime:        a java LocalDateTime (requires format configuration)
    # - zoned-datetime:  a java ZonedDateTime (requires format configuration)
    # - offset-datetime: a java OffsetDateTime (requires format configuration)
    # - text:            a java String
    # - number:          a java Integer
    # - decimal:         a java Double
    # - flag:            a java Boolean
    # - enum:            a set of possible String values
    #
    # Attributes might have multiple values (indicated with an '[]' after the type), which can be useful in situations
    # where you need a collection of values like exceptions that are shown in a stacktrace.
    #
    # For attributes requiring configuration, it's passed with an '|' after the type, followed by the configuration
    #
    # Attributes of a "datetime" variant may have an "*" at the end to add a fallback "time" attribute. Sometimes, the
    # log only contains the time information (when it's a console log, for example). So you add a datetime pattern, but
    # enclose part of it with "()" and that part will be used as a time pattern for fallback.
    attributes:
      timestamp: datetime* | yyyy-MM-dd (HH:mm:ss,SSS)
      level:     enum | TRACE,DEBUG,FINE,INFO,WARN,WARNING,ERROR,SEVERE,FATAL
      category:  text
      thread:    text
      exception: text[]
      message:   text

# The registry will keep track of all assigned values and which entries hold the values. Indexed attributes that also
# have an icon will appear in the prompt together with a counter for how many different values were indexed.
index:
  - $source
  - level
  - category
  - thread
  - exception

# Parsers are the next component in the chain, responsible for getting the contents
# read by a reader and converting it into a structure
#
# Currently, there are 3 different types of parsers:
# - csv: parses the lines as a CSV row
# - json: parses the lines as JSON data
# - regex: parses the lines using a regular expression with named capture groups
parsers:
  java:
    # A regex parser exposes the named groups found in the pattern
    type:    regex
    # You can reuse patterns across the configuration by enclosing the names with '{{ }}'
    # the names enclosed must be defined in the 'patterns' section
    pattern: '{{timestamp}} {{level}}\s+{{category}} {{thread}} {{message}}'
  infinispan:
    type:    regex
    pattern: '{{timestamp}} {{level}}\s+{{thread}} {{category}} {{message}}'

# Next in the chain are the Mappers, responsible for taking values from the parsed structure
# to form an entry defined in a data model
#
# Mappers can be:
# - function: passes a string as an argument an expects to get a value from the structure in return
#             (useful for json and regex parsed data)
# - column: passes the attributes in the order they appear in the given array structure
#           (useful for csv parsed data)
mappers:
  java:
    type: function
    # The given names would be directly passed to the data structure and the result
    # will be assigned to an attribute with the same name.
    # This is useful to map regex named groups to a data model
    copy: timestamp,level,category,thread,message

patterns:
  timestamp: '(?<timestamp>(\\d{2,4}-\\d{2}-\\d{2,4} )?\\d{2}:\\d{2}:\\d{2},\\d{3})'
  level:     '(?<level>\\w+)'
  category:  '\\[(?<category>[^]]+]*)]'
  thread:    '\\((?<thread>[^)]+\\)*)\\)'
  message:   '(?<message>.+)'

# After the model is populated, it's possible to run a series of steps to
# refine the data as needed. The steps are identified, so you can apply
# different steps depending on the scenario
#
# A step is defined by the given structure:
#
# when    : a filter for applying the step only for entries matching it.
#
#           If a multiline string is given, each line will represent one
#           filter and the entry must match all of them
#
#           If a filter is not defined, the step will run for all entries
#
#           The filter syntax is the same used in the UI
#
# assign  : assigns a value to a named attribute
#
#           It's possible to reference attributes' values by enclosing their names
#           with '{ }'.
#
# extract : searches for a value inside an attribute and, if it's found, uses it to
#           populate another attribute
#
# map     : uses a regex to extract named capture groups and use them to
#           populate the correspondent attributes.
#
#           The operation continues as long as there are matches, so you can use
#           this step to populate attributes with multiple values
#
# replace : replaces any occurrences of a given text with another text for a defined
#           attribute
steps:
  java-find-exceptions:
    - when: level >= WARN
      map:
        from:  message
        regex: '(?<exception>\w+(\.\w+)+(Exception|Error))'

# Pipelines are the way Sherlog Holmes binds a reader with the rest of the chain.
#
# A pipeline defines which data model, parser, mapper and steps will be used to
# process data coming from a reader.
#
# If you have the same names defined for all the four components, then Sherlog Holmes
# automatically registers a pipeline with the same name. In such cases, the default
# fallback mode will be applied.
pipelines:
  infinispan:
    model:  java
    parser: infinispan
    mapper: java
    steps:  java-find-exceptions
  java:
    model:  java
    parser: java
    mapper: java
    steps:  java-find-exceptions

# If you define an icon with a prefix of "attribute-" and an attribute name, the icon
# will be used as a graphical representation of that attribute, so you can use it for
# the output format.
#
# If the attribute is also indexed, then its icon will show up in the command prompt
# together with a counter showing how many values were indexed.
#
# Icons are from Nerd Fonts, you can see more at
# https://www.nerdfonts.com/cheat-sheet
icons:
  # timestamp is not indexed, so this icon will only appear in the output
  attribute-timestamp: ""
  # level is indexed, so this icon will appear in the prompt
  attribute-level:     "󰒢"
  attribute-category:  "󰓹"
  attribute-thread:    "󰓁"
  attribute-message:   "󰍧"
  # exception is indexed, so the prompt will show how many exceptions were indexed
  attribute-exception: ""

colors:
  attribute-level:     yellow
  attribute-category:  blue
  attribute-thread:    grey
  attribute-message:   white
  attribute-exception: red

# Styles defines how the values will appear in the console.
#
# The format is foreground/background/effects, or just the foreground color.
#
# The possible effects are:
#
# b - bold
# i - italic
# u - underline
# k - blink
# c - crossedOut
styles:
  attribute-timestamp:           grey//i

  attribute-level-TRACE:         cyan
  attribute-level-DEBUG:         cyan
  attribute-level-FINE:          cyan
  attribute-level-INFO:          orange
  attribute-level-WARN:          yellow
  attribute-level-ERROR:         red//b
  attribute-level-SEVERE:        red//b
  attribute-level-FATAL:         red//b

  attribute-category:            blue
  attribute-thread:              grey
  attribute-message:             white
  attribute-exception:           red

  model-property:                white//b
  model-name:                    blue//b
  model-attribute-name:          yellow//b

  model-attribute-type-text:     purple
  model-attribute-type-number:   blue
  model-attribute-type-decimal:  blue
  model-attribute-type-enum:     orange
  model-attribute-type-temporal: teal
  model-attribute-type-fallback: teal
  model-attribute-type-flag:     green
  model-attribute-type-version:  red
  model-attribute-type-url:      cyan
  model-attribute-type-uri:      cyan

  pipeline-name:                 blue//b
  pipeline-property-name:        yellow//b
  pipeline-property-value:       orange
